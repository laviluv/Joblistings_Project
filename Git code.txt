 n:
 
 cd "N:\AF Kompetensutveckling Lexicon\githublavi\Joblistingsfinal\client-frontend"
 
 git rm -r *  
 
 git commit -m "purge repo contents and start fresh"
 
 git push -f origin master
 
 #git push --set-upstream origin master
 
 git init
 
 #git remote add jobs 
 git remote add upstream https://github.com/laviluv/Joblistingsprojekt.git

 
 git add "API" "App" "Domain" "DataLayer" "InsertDataSampleSQLQuery.txt" "Joblistings.postman_collection.json" "client-frontend/" "Git code.txt"
git add  "client-frontend/src/app/layout/NavBar.tsx" "client-frontend/src/app/layout/bootstrap-5.0.0-beta3-dist/"
 
 git status
 
 #use "git rm --cached <file>..." to unstage
 
 git commit -am "MESSAGE"
 
 #git pull origin master
 
 git push origin master
 
 
 
 git remote add origin https://github.com/laviluv/Joblistingsprojekt.git

//pull those changes
git pull origin master 

// or optionally, 'git pull origin master --allow-unrelated-histories' if you have initialized repo in github and also committed locally

//now, push your work to your new repo
git push origin master







//////BACKUP agent.tsx





import axios, { AxiosResponse } from 'axios';
import { Joblisting } from '../models/joblisting';

axios.defaults.baseURL = 'https://localhost:44358/api';
axios.defaults.headers = {
   'Content-Type': 'application/json',
  //  'Content-Type': 'text/plain',
    'Accept': '*/*' 
}

const responseBody = <T> (response: AxiosResponse<T>) => response.data;

const requests = {

    get: <T> (url: string) => axios.get<T>(url).then(responseBody),
    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),

  
    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody => {
        console.log('Response', responseBody.data)
    })
    .catch(e => {
        console.log('Error: ', e.responseBody.data)
    }),

delete: <T>(url: string) => axios.delete<T>(url).then(responseBody => {
    console.log('Response', responseBody.data)
})
    .catch(e => {
        console.log('Error: ', e.responseBody.data)
    })

}



        


const Joblistings = {
    list: () => requests.get<Joblisting[]>('/joblistings'),
    details: (id: string) => requests.get<Joblisting>('/joblistings/${id}'),
    create: (joblisting: Joblisting) => axios.post<void>('/joblistings', joblisting),
   // update: (joblisting: Joblisting) => axios.put<void>('/joblistings/${joblisting.id}', joblisting),
   // delete: (id: string) => axios.delete<void>('/joblistings/?id=${id}')
   // update: (joblisting: Joblisting) => axios.put<void>('/joblistings/${joblisting.id}', { params: joblisting }),

    update: (joblisting: Joblisting) => axios.put('/joblistings/${joblisting.id}', joblisting)
        .catch(function (error) {

            if (error.response) {
                // The request was made and the server responded with a status code
                // that falls out of the range of 2xx
                console.log(error.response.data);
                console.log(error.response.status);
                console.log(error.response.headers);
            } else if (error.request) {
                // The request was made but no response was received
                // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
                // http.ClientRequest in node.js
                console.log(error.request);
            } else {
                // Something happened in setting up the request that triggered an Error
                console.log('Error', error.message);
            }
            console.log(error.config);

        }),

    delete: (id: string) => axios.delete<void>('/joblistings/${id}')


        //.catch(function (error) {
        //    if (error.response) {
        //        // The request was made and the server responded with a status code
        //        // that falls out of the range of 2xx
        //        console.log(error.response.data);
        //        console.log(error.response.status);
        //        console.log(error.response.headers);
        //    } else if (error.request) {
        //        // The request was made but no response was received
        //        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
        //        // http.ClientRequest in node.js
        //        console.log(error.request);
        //    } else {
        //        // Something happened in setting up the request that triggered an Error
        //        console.log('Error', error.message);
        //    }
        //    console.log(error.config);
        //}),


  

  
     


    

    //const params = {
    //    articleNumber: this.articleNumber,
    //};

    //const response = await axios.$get('/api/slider?mode=bestseller', { params });

      //axios.get('api?&foo=bar') || axios.get(api?&${param}=${value})

    //axios.put(url?&${id}=${id})
    //?id=fc244e0d-80d6-4ef7-a6cc-2d094e7b6007&title=testingthis&description=asdAdAcytcy&date=2021-04-26&category=AADAdccy&city=ADdDdcytcy
}


//axios.post('https://localhost:44358/api/Joblistings/', { "body": data
//    })
//    .then(response => {
//        console.log('Response', response.data)
//    })
//    .catch(e => {
//        console.log('Error: ', e.response.data)
//    })




//axios.delete('https://localhost:44358/api/Joblistings/3363A6C7-9C11-484C-8D3C-454F15E5C716')
//    .then(response => {
//        console.log('Response', response.data)
//    })
//    .catch(e => {
//        console.log('Error: ', e.response.data)
//    })


function delay(ms: number) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

(async () => {
    // Do something before delay
    console.log('before delay-------------------------------------------------------------------');


    //let data = {
    //    title: 'TESTREACTAXIOS!!!',
    //    date: '05-08-2020',
    //    description: 'Description of the API added joblisting',
    //    category: 'Test through API',
    //    city: 'Testcity'
    //}



    //axios.post('https://api.com/v1/resource',
    //    {
    //        title: 'TESTREACTAXIOS!!!',
    //        date: '05-08-2020',
    //        description: 'Description of the API added joblisting',
    //        category: 'Test through API',
    //        city: 'Testcity'
    //    },
    //    {
    //        // Config
    //    }
    //);


    axios.put('https://localhost:44358/api/Joblistings/9E001D0E-B6B8-4403-19E7-08D9123991EF', 
        //data
        {
            id: '9E001D0E-B6B8-4403-19E7-08D9123991EF',
            title: 'PUTSUCCESSFULL!!!',
            date: '2021-04-05 00:00:00.0000000',
            description: 'Description of the API added joblisting',
            category: 'Test through API',
            city: 'Testcity'
        },

    )
        .then(response => {
            console.log('Response', response.data)
        })
        .catch(error => {
            console.log('Error: ', error.response.data);

            if (error.response) {
                // The request was made and the server responded with a status code
                // that falls out of the range of 2xx
                console.log(error.response.data);
                console.log(error.response.status);
                console.log(error.response.headers);


            } else if (error.request) {
                // The request was made but no response was received
                // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
                // http.ClientRequest in node.js
                console.log(error.request);

            } else {
                // Something happened in setting up the request that triggered an Error
                console.log('Error', error.message)
            }

        })


    await delay(20000);

    // Do something after
    console.log('after delay NO 1  **************************************************************************');



  

    axios.delete('https://localhost:44358/api/Joblistings/01FCFD55-3E71-45EE-19E9-08D9123991EF'
    )
        .then(response => {
            console.log('Response', response.data)
        })
        .catch(error => {
            console.log('Error: ', error.response.data);

            if (error.response) {
                // The request was made and the server responded with a status code
                // that falls out of the range of 2xx
                console.log(error.response.data);
                console.log(error.response.status);
                console.log(error.response.headers);


            } else if (error.request) {
                // The request was made but no response was received
                // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
                // http.ClientRequest in node.js
                console.log(error.request);

            } else {
                // Something happened in setting up the request that triggered an Error
                console.log('Error', error.message)
            }

        })


    await delay(20000);

    // Do something after
    console.log('after delay NO 2  **************************************************************************');





})();




const agent = { Joblistings };

export default agent;


